#! /usr/bin/env ruby

require 'ftools'
require 'builder'
require 'digest/sha1'

@logs = {}
url_linkers = [
  [ /([\w]+):\/\/([^\s]+)/, '<a href="\1://\2">\1://\2</a>' ],
  [ /\s(www\.[^\s]+)/i, '<a href="http://\1">\1</a>' ],
  [ /\s(ftp\.[^\s]+)/i, '<a href="ftp://\1">\1</a>' ],
  [ /\s(irc\.[^\s]+)/i, '<a href="irc://\1">\1</a>' ],
  [ /\s(irc\.[^\s]+)/i, '<a href="irc://\1">\1</a>' ],
  [ /\s([^\s]+)@([^\s]+)/, '<a href="mailto:\1@\2">\1@\2</a>' ]
]

ARGV.each do |filename|
  File.open(filename) do |f|
    f.each_line do |line|
      next if line !~ /\sPRIVMSG\s/
      timestamp, hostname, origin, command, channel, message = line.split(/ /, 6)
      nanoseconds = timestamp[-8..-1]
      seconds = timestamp[-16..-9]
      time = Time.at("#{seconds.to_i(16)}.#{nanoseconds.to_i(16)}".to_f)
      logfile = File.join(Dir.pwd, hostname.downcase.gsub(/[^a-z0-9\-\_\.]/, '_'), channel.downcase.gsub(/[^a-z0-9\-\_\.]/, '_'), time.strftime('%Y-%m-%d') + '.html')
      @logs[logfile] ||= { :messages => [], :hostname => hostname, :channel => channel }
      buffer = StringIO.new ""
      xml = Builder::XmlMarkup.new :target => buffer, :indent => 2
      id = Digest::SHA1.hexdigest(line)
      xml.div(:id => id, :class => "message") {
        xml.a('#', :class => "bookmark", :href => '#' + id)
        xml.span(time.strftime('%H:%M:%S'), :class => "time")
        xml.span(origin, :class => "nickname")
        message.gsub! /&/, '&amp;'
        message.gsub! /</, '&lt;'
        message.gsub! />/, '&gt;'
        message.gsub! /'/, '&apos;'
        message.gsub! /"/, '&quot;'
        url_linkers.each do |regex, replace|
          message.gsub! regex, replace
        end
        xml.span(:class => "content") { xml << message }
      }
      buffer.rewind
      @logs[logfile][:messages] << buffer.read
    end
  end
end

@logs.each_pair do |logfile, info|
  messages = info[:messages]
  date = File.basename(logfile.split(/\//)[-1], '.log')
  title = "irc://#{info[:hostname]}/#{info[:channel]} @ #{date}"
  if !File.exists?(File.dirname(logfile))
    File.makedirs(File.dirname(logfile))
  end
  buffer = StringIO.new ""
  xml = Builder::XmlMarkup.new :target => buffer, :indent => 2
  xml.instruct!
  xml.declare! :DOCTYPE, "html", :PUBLIC, "-//W3C//DTD XHTML 1.0 Strict//EN", "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"
  xml.html(:xmlns => "http://www.w3.org/1999/xhtml") {
    xml.head {
      xml.title title
      xml.style(:type => "text/css") {
        xml << '.nickname { color: #6633cc; }'
        xml << '.time { color: #999999; }'
        xml << '.message:hover { color: black; background-color: #cccc66; }'
        xml << '.bookmark { color: white; }'
        xml << '.message:hover .bookmark { color: black; }'
        xml << '#about { color: #ccc; margin-top: 1em; border-top: 1px solid #666; }'
      }
    }
    xml.body {
      xml.h1 title
      xml.h2 "Log for #{date}"
      xml.p "All times are in UTC."
      xml.div(:id => "messages") {
        xml << messages
      }
      xml.div(:id => "about") {
        xml << %Q(Generated by a bot using <a href="http://github.com/craigw/sprinkles">sprinkles</a>.)
      }
    }
  }
  buffer.rewind
  File.open(logfile, 'w') { |f|
    f.puts(buffer.read)
  }
end